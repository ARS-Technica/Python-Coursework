# -*- coding: utf-8 -*-
"""
100 Days of Code The Complete Python Pro Bootcamp for 2023
Day 11 - Beginner - The Blackjack Capstone Project

Code Challenge: Blackjack
    
Created on Tue Nov 12 16:56:50 2024
"""


############### Blackjack Project #####################

#Difficulty Normal ðŸ˜Ž: Use all Hints below to complete the project.
#Difficulty Hard ðŸ¤”: Use only Hints 1, 2, 3 to complete the project.
#Difficulty Extra Hard ðŸ˜­: Only use Hints 1 & 2 to complete the project.
#Difficulty Expert ðŸ¤¯: Only use Hint 1 to complete the project.

############### Our Blackjack House Rules #####################

## The deck is unlimited in size. 
## There are no jokers. 
## The Jack/Queen/King all count as 10.
## The the Ace can count as 11 or 1.
## Use the following list as the deck of cards:
## cards = [11, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]
## The cards in the list have equal probability of being drawn.
## Cards are not removed from the deck as they are drawn.
## The computer is the dealer.

##################### Hints #####################

#Hint 1: Go to this website and try out the Blackjack game: 
#   https://games.washingtonpost.com/games/blackjack/
#Then try out the completed Blackjack project here: 
#   https://appbrewery.github.io/python-day11-demo/

#Hint 2: Read this breakdown of program requirements: 
#   http://listmoz.com/view/6h34DJpvJBFVRlZfJvxF
#Then try to create your own flowchart for the program.

#Hint 3: Download and read this flow chart I've created: 
#   https://drive.google.com/uc?export=download&id=1rDkiHCrhaf9eX7u7yjM1qwSuyEk-rPnt

#Hint 4: Create a deal_card() function that uses the List below to *return* a random card.
#11 is the Ace.
#cards = [11, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]
import random 
from black_jack_art import logo


def deal_card(user, quantity):
    cards = [11, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]
    choice = random.choice(cards)
    
    for n in range(quantity):
        user.append(choice)


#Hint 6: Create a function called calculate_score() that takes a List of cards as input and returns the score. 
#Look up the sum() function to help you do this.
def calculate_score(card_list):
    hand_score = sum(card_list)
    
    #Hint 7: Inside calculate_score() check for a blackjack (a hand with only 2 cards: ace + 10) and return 0 instead of the actual score. 0 will represent a blackjack in our game.
    if hand_score == 21:
        return 0

    #Hint 8: Inside calculate_score() check for an 11 (ace). If the score is already over 21, remove the 11 and replace it with a 1. You might need to look up append() and remove().
    if 11 in card_list:
        card_list.remove(11)
        card_list.append(1)
        return sum(card_list)
    else:
        return hand_score


#Hint 13: Create a function called compare() and pass in the user_score and computer_score. 
def compare(user_score, comp_score):
    if user_score > 21 and comp_score > 21:
        return f"\nYou and the computer have both busted. You lose.\nComputer: {comp_score} You: {user_score}"

    if user_score == 0 and comp_score == 0:
        return "\nYou and the computer both have Blackjack!. It's a draw."

    if user_score == comp_score:
        return f"\nIt's a Draw\nComputer: {comp_score} You: {user_score}"
    elif comp_score == 0:
        return "\nSorry. You lose. The computer has Blackjack!"
    elif user_score == 0:
        return "\nCongratulations! You've hit Blackjack!"
    elif user_score > 21:
        return f"\nSorry. You've busted.\nComputer: {comp_score} You: {user_score}"
    elif comp_score > 21:
        return f"\nThe computer has busted. You win. Congratulations!\nComputer: {comp_score} You: {user_score}"
    elif user_score > comp_score:
        return f"\nCongratulations! You win!\nComputer: {comp_score} You: {user_score}"
    else:
        return f"\nSorry. You lose.\nComputer: {comp_score} You: {user_score}"

    print("\n")


def play():
    print(logo)
    game_continues = True

    #Hint 5: Deal the user and computer 2 cards each using deal_card() and append().  
    user_cards = []
    comp_cards = []

    deal_card(user_cards, 2)
    deal_card(comp_cards, 2)

    #print(user_cards)
    #print(comp_cards)

    while game_continues == True:
        #Hint 9: Call calculate_score(). If the computer or the user has a blackjack (0) or 
        #if the user's score is over 21, then the game ends.
        
        user_score = int(calculate_score(user_cards))
        comp_score = int(calculate_score(comp_cards))
        
        print("\n")
        print(f"Your hand: {user_cards} \nCurrent score: {user_score}")
        print(f"Computer's opening card: {comp_cards[0]}")        
        
        if user_score == 0:
            game_continues = False
        elif user_score > 21:
            game_continues = False
        elif comp_score == 0:
            game_continues = False
        else:
            #Hint 10: If the game has not ended, ask the user if they want to draw another card. 
            #If yes, then use the deal_card() function to add another card to the user_cards List. 
            #If no, then the game has ended.
            more = input("Would you like to draw another card? Y / N: ").lower()
            
            if more == "y":
                deal_card(user_cards, 1)
                #Hint 12: Once the user is done, it's time to let the computer play. The computer should keep drawing cards as long as it has a score less than 17.
                deal_card(comp_cards, 1)
                #Hint 11: The score will need to be rechecked with every new card drawn and the checks in Hint 9 need to be repeated until the game ends.
                compare(user_score, comp_score)
            else:
                game_continues = False

    print("\n")
    print(f"Your final hand: {user_cards} \nFinal score: {user_score}")
    print(f"Computer's final hand: {comp_cards} \nFinal score: {comp_score}")
    print(compare(user_score, comp_score))


#Hint 14: Ask the user if they want to restart the game. If they answer yes, clear the console and start a new game of blackjack and show the logo from art.py.
if __name__ == "__main__":
    start = input("Would you like to play a game of Blackjack? Y/N: ").lower()
    
    if start == "y":
        play()
    else:
        print("Thanks any way.  Hope to see you soon.")

